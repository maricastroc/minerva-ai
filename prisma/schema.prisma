generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

enum MessageRole {
  USER
  ASSISTANT
}

model User {
  id            String          @id @default(uuid())
  name          String
  avatarUrl     String?
  createdAt     DateTime        @default(now())
  email         String?         @unique
  emailVerified DateTime?
  password      String?

  accounts      Account[]
  sessions      Session[]
  conversations Conversation[]

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Conversation {
  id        String   @id @default(uuid())
  title     String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Message[]

  @@index([userId])
  @@index([createdAt])

  @@map("conversations")
}

model Message {
  id             String      @id @default(uuid())
  content        String
  role           MessageRole
  conversationId String
  timestamp      DateTime    @default(now())
  tokens         Int? 
  model          String?

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([conversationId, timestamp])
  @@index([role])

  @@map("messages")
}